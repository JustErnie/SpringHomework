Index: SpringHomework.iml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/SpringHomework.iml b/SpringHomework.iml
new file mode 100644
--- /dev/null	(date 1697028162094)
+++ b/SpringHomework.iml	(date 1697028162094)
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<module org.jetbrains.idea.maven.project.MavenProjectsManager.isMavenModule="true" type="JAVA_MODULE" version="4">
+  <component name="NewModuleRootManager" LANGUAGE_LEVEL="JDK_19">
+    <output url="file://$MODULE_DIR$/target/classes" />
+    <output-test url="file://$MODULE_DIR$/target/test-classes" />
+    <content url="file://$MODULE_DIR$">
+      <sourceFolder url="file://$MODULE_DIR$/src/main/java" isTestSource="false" />
+      <sourceFolder url="file://$MODULE_DIR$/src/main/resources" type="java-resource" />
+      <sourceFolder url="file://$MODULE_DIR$/src/test/java" isTestSource="true" />
+      <excludeFolder url="file://$MODULE_DIR$/target" />
+    </content>
+    <orderEntry type="jdk" jdkName="19" jdkType="JavaSDK" />
+    <orderEntry type="sourceFolder" forTests="false" />
+    <orderEntry type="library" scope="TEST" name="Maven: junit:junit:4.13.2" level="project" />
+    <orderEntry type="library" scope="TEST" name="Maven: org.hamcrest:hamcrest-core:1.3" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-core:6.0.11" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-jcl:6.0.11" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-context:6.0.11" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-aop:6.0.11" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-beans:6.0.11" level="project" />
+    <orderEntry type="library" name="Maven: org.springframework:spring-expression:6.0.11" level="project" />
+  </component>
+</module>
\ No newline at end of file
Index: .idea/modules.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/modules.xml b/.idea/modules.xml
new file mode 100644
--- /dev/null	(date 1697028162112)
+++ b/.idea/modules.xml	(date 1697028162112)
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<project version="4">
+  <component name="ProjectModuleManager">
+    <modules>
+      <module fileurl="file://$PROJECT_DIR$/SpringHomework.iml" filepath="$PROJECT_DIR$/SpringHomework.iml" />
+    </modules>
+  </component>
+</project>
\ No newline at end of file
Index: .idea/jarRepositories.xml
===================================================================
diff --git a/.idea/jarRepositories.xml b/.idea/jarRepositories.xml
deleted file mode 100644
--- a/.idea/jarRepositories.xml	
+++ /dev/null	
@@ -1,20 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="RemoteRepositoriesConfiguration">
-    <remote-repository>
-      <option name="id" value="central" />
-      <option name="name" value="Central Repository" />
-      <option name="url" value="https://repo.maven.apache.org/maven2" />
-    </remote-repository>
-    <remote-repository>
-      <option name="id" value="central" />
-      <option name="name" value="Maven Central repository" />
-      <option name="url" value="https://repo1.maven.org/maven2" />
-    </remote-repository>
-    <remote-repository>
-      <option name="id" value="jboss.community" />
-      <option name="name" value="JBoss Community repository" />
-      <option name="url" value="https://repository.jboss.org/nexus/content/repositories/public/" />
-    </remote-repository>
-  </component>
-</project>
\ No newline at end of file
Index: .idea/compiler.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/compiler.xml b/.idea/compiler.xml
--- a/.idea/compiler.xml	
+++ b/.idea/compiler.xml	(date 1697028164982)
@@ -6,8 +6,10 @@
         <sourceOutputDir name="target/generated-sources/annotations" />
         <sourceTestOutputDir name="target/generated-test-sources/test-annotations" />
         <outputRelativeToContentRoot value="true" />
-        <module name="SpringHomework" />
       </profile>
     </annotationProcessing>
+    <bytecodeTargetLevel>
+      <module name="SpringHomework" target="19" />
+    </bytecodeTargetLevel>
   </component>
 </project>
\ No newline at end of file
Index: .idea/encodings.xml
===================================================================
diff --git a/.idea/encodings.xml b/.idea/encodings.xml
deleted file mode 100644
--- a/.idea/encodings.xml	
+++ /dev/null	
@@ -1,7 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project version="4">
-  <component name="Encoding">
-    <file url="file://$PROJECT_DIR$/src/main/java" charset="UTF-8" />
-    <file url="file://$PROJECT_DIR$/src/main/resources" charset="UTF-8" />
-  </component>
-</project>
\ No newline at end of file
Index: .idea/.gitignore
===================================================================
diff --git a/.idea/.gitignore b/.idea/.gitignore
deleted file mode 100644
--- a/.idea/.gitignore	
+++ /dev/null	
@@ -1,3 +0,0 @@
-# Default ignored files
-/shelf/
-/workspace.xml
Index: pom.xml
===================================================================
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
--- a/pom.xml	
+++ /dev/null	
@@ -1,37 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-  xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-  <modelVersion>4.0.0</modelVersion>
-
-  <groupId>org.example</groupId>
-  <artifactId>SpringHomework</artifactId>
-  <version>1.0-SNAPSHOT</version>
-  <packaging>jar</packaging>
-
-  <name>SpringHomework</name>
-  <url>http://maven.apache.org</url>
-
-  <properties>
-    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-    <maven.compiler.source>19</maven.compiler.source>
-    <maven.compiler.target>19</maven.compiler.target>
-  </properties>
-
-  <dependencies>
-    <dependency>
-      <groupId>junit</groupId>
-      <artifactId>junit</artifactId>
-      <version>4.13.2</version>
-      <scope>test</scope>
-    </dependency>
-    <dependency>
-      <groupId>org.springframework</groupId>
-      <artifactId>spring-core</artifactId>
-      <version>6.0.11</version>
-    </dependency>
-    <dependency>
-      <groupId>org.springframework</groupId>
-      <artifactId>spring-context</artifactId>
-      <version>6.0.11</version>
-    </dependency>
-  </dependencies>
-</project>
Index: src/main/java/Competition/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Competition/Main.java b/src/main/java/Competition/Main.java
new file mode 100644
--- /dev/null	(date 1697028162118)
+++ b/src/main/java/Competition/Main.java	(date 1697028162118)
@@ -0,0 +1,30 @@
+package Competition;
+
+import org.springframework.context.annotation.AnnotationConfigApplicationContext;
+
+import java.util.ArrayList;
+import java.util.List;
+
+public class Main {
+    public static void main(String[] args) {
+        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ResultProcessorConfig.class);
+
+        CsvParser csvParser = context.getBean(CsvParser.class);
+        csvParser.parseCsv();
+
+        ResultsProcessor resultsProcessor = context.getBean(ResultsProcessor.class);
+//        List<Competitor> topCompetitors = resultsProcessor.getTopCompetitors(3, Gender.FEMALE, Distance.TenKm);
+//        System.out.println(topCompetitors);
+
+        resultsProcessor.printTopCompetitors(10, Gender.FEMALE, Distance.TenKm);
+
+
+
+    }
+
+    void proxyPrint() {
+        System.out.println();
+        System.out.println();
+        System.out.println();
+    }
+}
Index: src/main/java/Competition/Gender.java
===================================================================
diff --git a/src/main/java/Competition/Gender.java b/src/main/java/Competition/Gender.java
deleted file mode 100644
--- a/src/main/java/Competition/Gender.java	
+++ /dev/null	
@@ -1,12 +0,0 @@
-package Competition;
-
-public enum Gender {
-    MALE("M"),
-    FEMALE("Ж");
-
-    final String string;
-
-    Gender(String string) {
-        this.string = string;
-    }
-}
Index: src/main/java/Competition/Distance.java
===================================================================
diff --git a/src/main/java/Competition/Distance.java b/src/main/java/Competition/Distance.java
deleted file mode 100644
--- a/src/main/java/Competition/Distance.java	
+++ /dev/null	
@@ -1,11 +0,0 @@
-package Competition;
-
-public enum Distance {
-    FiveKm("5 км"),
-    TenKm("10 км");
-
-    final String string;
-    Distance(String string) {
-        this.string = string;
-    }
-}
Index: src/main/java/Competition/CsvParser.java
===================================================================
diff --git a/src/main/java/Competition/CsvParser.java b/src/main/java/Competition/CsvParser.java
deleted file mode 100644
--- a/src/main/java/Competition/CsvParser.java	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package Competition;
-
-import java.util.List;
-
-public interface CsvParser {
-
-    void parseCsv();
-
-    List<Competitor> getCompetitorList();
-}
Index: src/main/java/Competition/Competitor.java
===================================================================
diff --git a/src/main/java/Competition/Competitor.java b/src/main/java/Competition/Competitor.java
deleted file mode 100644
--- a/src/main/java/Competition/Competitor.java	
+++ /dev/null	
@@ -1,86 +0,0 @@
-package Competition;
-
-import java.util.regex.Matcher;
-import java.util.regex.Pattern;
-
-public class Competitor {
-    private final String name;
-    private final Gender gender;
-    private final Distance distance;
-    private final String time;
-    private final int timeInSeconds;
-
-    public Competitor(String name, String gender, String distance, String time) {
-        this.name = name;
-        this.gender = convertGender(gender);
-        this.distance = convertDistance(distance);
-        this.time = time;
-        this.timeInSeconds = convertTime(time);
-    }
-
-
-    public String getName() {
-        return name;
-    }
-
-    public Gender getGender() {
-        return gender;
-    }
-
-    public Distance getDistance() {
-        return distance;
-    }
-
-    public String getTime() {
-        return time;
-    }
-
-    public int getTimeInSeconds() {
-        return timeInSeconds;
-    }
-
-    private Distance convertDistance(String distance) {
-        if (Distance.FiveKm.string.equals(distance)) {
-            return Distance.FiveKm;
-        }
-        if (Distance.TenKm.string.equals(distance)) {
-            return Distance.TenKm;
-        }
-        throw new IllegalArgumentException("Wrong distance passed");
-    }
-
-    private static int convertTime(String time) {
-        // 52:20
-        Pattern p = Pattern.compile("(\\d{2}):(\\d{2})");
-        Matcher m = p.matcher(time);
-
-        if (m.matches()) {
-            String minutesStr = m.group(1);
-            String secondsStr = m.group(2);
-
-            int minutes = Integer.parseInt(minutesStr);
-            int seconds = Integer.parseInt(secondsStr);
-            return minutes * 60 + seconds;
-        } else throw new IllegalStateException("Can not match time");
-    }
-
-    private Gender convertGender(String gender) {
-        //М
-        return switch (gender) {
-            case "М": yield Gender.MALE;
-            case "Ж": yield Gender.FEMALE;
-            default : throw new IllegalArgumentException("Wrong gender");
-        };
-    }
-
-    @Override
-    public String toString() {
-        return "Competitor{" +
-               "name='" + name + '\'' +
-               ", gender=" + gender.string +
-               ", distance=" + distance.string +
-               ", time='" + time + '\'' +
-               ", timeInSeconds=" + timeInSeconds +
-               '}';
-    }
-}
Index: src/main/java/Competition/ResultsProcessor.java
===================================================================
diff --git a/src/main/java/Competition/ResultsProcessor.java b/src/main/java/Competition/ResultsProcessor.java
deleted file mode 100644
--- a/src/main/java/Competition/ResultsProcessor.java	
+++ /dev/null	
@@ -1,10 +0,0 @@
-package Competition;
-
-import java.util.List;
-
-public interface ResultsProcessor {
-    List<Competitor> getTopCompetitors(int number, Gender gender, Distance distance);
-
-    void printTopCompetitors(int number, Gender gender, Distance distance);
-
-}
Index: src/main/java/Competition/InMemoryCsvParser.java
===================================================================
diff --git a/src/main/java/Competition/InMemoryCsvParser.java b/src/main/java/Competition/InMemoryCsvParser.java
deleted file mode 100644
--- a/src/main/java/Competition/InMemoryCsvParser.java	
+++ /dev/null	
@@ -1,39 +0,0 @@
-package Competition;
-
-import org.springframework.beans.factory.annotation.Value;
-import org.springframework.core.io.Resource;
-import org.springframework.stereotype.Service;
-
-import java.io.BufferedReader;
-import java.io.FileReader;
-import java.io.IOException;
-import java.util.List;
-
-@Service
-public class InMemoryCsvParser implements CsvParser {
-
-    @Value("classpath:Results.csv")
-    private Resource resource;
-
-    private final List<Competitor> competitorList;
-
-    public InMemoryCsvParser(List<Competitor> competitorList) {
-        this.competitorList = competitorList;
-    }
-
-    public List<Competitor> getCompetitorList() {
-        return competitorList;
-    }
-
-    public void parseCsv(){
-        try (BufferedReader reader = new BufferedReader(new FileReader(resource.getFile()))){
-            String line;
-            while ((line = reader.readLine()) != null) {
-                String[] split = line.split(",");
-                competitorList.add(new Competitor(split[0], split[1], split[2], split[3]));
-            }
-        } catch (IOException e) {
-            throw new RuntimeException(e);
-        }
-    }
-}
Index: src/main/java/Competition/ResultProcessorConfig.java
===================================================================
diff --git a/src/main/java/Competition/ResultProcessorConfig.java b/src/main/java/Competition/ResultProcessorConfig.java
deleted file mode 100644
--- a/src/main/java/Competition/ResultProcessorConfig.java	
+++ /dev/null	
@@ -1,9 +0,0 @@
-package Competition;
-
-import org.springframework.context.annotation.ComponentScan;
-import org.springframework.context.annotation.Configuration;
-
-@Configuration
-@ComponentScan("Competition")
-public class ResultProcessorConfig {
-}
Index: src/main/java/Competition/InMemoryResultProcessor.java
===================================================================
diff --git a/src/main/java/Competition/InMemoryResultProcessor.java b/src/main/java/Competition/InMemoryResultProcessor.java
deleted file mode 100644
--- a/src/main/java/Competition/InMemoryResultProcessor.java	
+++ /dev/null	
@@ -1,37 +0,0 @@
-package Competition;
-
-import org.springframework.stereotype.Service;
-
-import java.util.Comparator;
-import java.util.List;
-
-@Service
-public class InMemoryResultProcessor implements ResultsProcessor {
-    CsvParser csvParser;
-
-    public InMemoryResultProcessor(CsvParser csvParser) {
-        this.csvParser = csvParser;
-    }
-
-    @Override
-    public List<Competitor> getTopCompetitors(int number, Gender gender, Distance distance) {
-        return csvParser.getCompetitorList().stream()
-                .filter(competitor -> competitor.getGender() == gender)
-                .filter(competitor -> competitor.getDistance() == distance)
-                .sorted(Comparator.comparing(Competitor::getTimeInSeconds))
-                .limit(number)
-                .toList();
-    }
-
-    @Override
-    public void printTopCompetitors(int number, Gender gender, Distance distance) {
-        List<Competitor> topCompetitors = getTopCompetitors(number, gender, distance);
-        for (int i = 0; i < number; i++) {
-            if (i >= topCompetitors.size()) break;
-            System.out.printf("Top %s competitor is %s with finish time: %s \n",
-                    i + 1, topCompetitors.get(i).getName(), topCompetitors.get(i).getTime());
-        }
-    }
-}
-
-
Index: src/main/resources/Results.csv
===================================================================
diff --git a/src/main/resources/Results.csv b/src/main/resources/Results.csv
deleted file mode 100644
--- a/src/main/resources/Results.csv	
+++ /dev/null	
@@ -1,40 +0,0 @@
-Иван,М,10 км,54:20
-Александр,М,10 км,53:20
-Сергей,М,10 км,52:20
-Екатерина,Ж,5 км,29:20
-Мирослава,Ж,5 км,28:10
-Оксана,Ж,5 км,31:31
-Кристина,Ж,5 км,32:25
-Эрнест,М,5 км,32:25
-Владислав,М,5 км,33:47
-Роман,М,5 км,32:20
-Пётр,М,5 км,33:20
-Святослав,М,5 км,29:20
-Аркадий,М,5 км,28:10
-Владимир,М,5 км,29:35
-Ярослав,М,5 км,28:15
-Светлана,Ж,10 км,54:20
-Наталья,Ж,10 км,53:20
-Анна,Ж,10 км,52:20
-Мария,Ж,10 км,51:20
-Тамара,Ж,10 км,55:10
-Михаил,М,10 км,55:40
-Роза,Ж,5 км,33:47
-Любовь,Ж,5 км,29:35
-Надежда,Ж,5 км,28:15
-Константин,М,10 км,55:50
-Денис,М,10 км,55:55
-Дмитрий,М,10 км,51:20
-Степан,М,5 км,31:20
-Соломон,М,5 км,31:31
-Анастасия,Ж,10 км,55:40
-Диана,Ж,10 км,55:50
-Марина,Ж,10 км,55:55
-Александра,Ж,5 км,31:20
-Эльмира,Ж,10 км,55:20
-Алёна,Ж,10 км,55:30
-Алексей,М,10 км,55:10
-Григорий,М,10 км,55:20
-Георгий,М,10 км,55:30
-Евгения,Ж,5 км,32:20
-Ксения,Ж,5 км,33:20
Index: src/main/resources/TestResults.csv
===================================================================
diff --git a/src/main/resources/TestResults.csv b/src/main/resources/TestResults.csv
deleted file mode 100644
--- a/src/main/resources/TestResults.csv	
+++ /dev/null	
@@ -1,4 +0,0 @@
-TestName1,М,5 км,34:51
-TestName2,М,10 км,33:51
-TestName3,Ж,5 км,32:51
-TestName4,Ж,10 км,31:51
\ No newline at end of file
Index: src/test/java/Competition/CompetitorTest.java
===================================================================
diff --git a/src/test/java/Competition/CompetitorTest.java b/src/test/java/Competition/CompetitorTest.java
deleted file mode 100644
--- a/src/test/java/Competition/CompetitorTest.java	
+++ /dev/null	
@@ -1,26 +0,0 @@
-package Competition;
-
-import org.junit.Test;
-
-import static org.junit.Assert.*;
-
-public class CompetitorTest {
-
-    @Test
-    public void parseTime() {
-        Competitor competitor = new Competitor("Вася", "М", "5 км", "51:20");
-        assertEquals(3080, competitor.getTimeInSeconds());
-    }
-
-    @Test
-    public void parseDistance() {
-        Competitor competitor = new Competitor("Вася", "М", "5 км", "51:20");
-        assertEquals(Distance.FiveKm, competitor.getDistance());
-    }
-
-    @Test
-    public void parseGender() {
-        Competitor competitor = new Competitor("Вася", "М", "5 км", "51:20");
-        assertEquals(Gender.MALE, competitor.getGender());
-    }
-}
\ No newline at end of file
Index: src/test/java/Competition/InMemoryCsvParserTest.java
===================================================================
diff --git a/src/test/java/Competition/InMemoryCsvParserTest.java b/src/test/java/Competition/InMemoryCsvParserTest.java
deleted file mode 100644
--- a/src/test/java/Competition/InMemoryCsvParserTest.java	
+++ /dev/null	
@@ -1,82 +0,0 @@
-package Competition;
-
-import org.junit.Assert;
-import org.junit.Test;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-
-import java.util.List;
-
-public class InMemoryCsvParserTest {
-
-    @Test
-    public void getCompetitorList() {
-        Competitor competitor1 = new Competitor("TestName1", "М", "5 км", "23:45");
-        Competitor competitor2 = new Competitor("TestName2", "Ж", "5 км", "22:45");
-        Competitor competitor3 = new Competitor("TestName3", "М", "10 км", "21:45");
-        Competitor competitor4 = new Competitor("TestName4", "Ж", "10 км", "20:45");
-        List<Competitor> competitors = List.of(competitor1, competitor2, competitor3, competitor4);
-        InMemoryCsvParser inMemoryCsvParserTest = new InMemoryCsvParser(competitors);
-
-        Assert.assertEquals(competitors, inMemoryCsvParserTest.getCompetitorList());
-    }
-
-    @Test
-    public void parseCsv() {
-        List<Competitor> expectedCompetitors = List.of(
-            new Competitor("Иван","М","10 км","54:20"),
-            new Competitor("Александр","М","10 км","53:20"),
-            new Competitor("Сергей","М","10 км","52:20"),
-            new Competitor("Екатерина","Ж","5 км","29:20"),
-            new Competitor("Мирослава","Ж","5 км","28:10"),
-            new Competitor("Оксана","Ж","5 км","31:31"),
-            new Competitor("Кристина","Ж","5 км","32:25"),
-            new Competitor("Эрнест","М","5 км","32:25"),
-            new Competitor("Владислав","М","5 км","33:47"),
-            new Competitor("Роман","М","5 км","32:20"),
-            new Competitor("Пётр","М","5 км","33:20"),
-            new Competitor("Святослав","М","5 км","29:20"),
-            new Competitor("Аркадий","М","5 км","28:10"),
-            new Competitor("Владимир","М","5 км","29:35"),
-            new Competitor("Ярослав","М","5 км","28:15"),
-            new Competitor("Светлана","Ж","10 км","54:20"),
-            new Competitor("Наталья","Ж","10 км","53:20"),
-            new Competitor("Анна","Ж","10 км","52:20"),
-            new Competitor("Мария","Ж","10 км","51:20"),
-            new Competitor("Тамара","Ж","10 км","55:10"),
-            new Competitor("Михаил","М","10 км","55:40"),
-            new Competitor("Роза","Ж","5 км","33:47"),
-            new Competitor("Любовь","Ж","5 км","29:35"),
-            new Competitor("Надежда","Ж","5 км","28:15"),
-            new Competitor("Константин","М","10 км","55:50"),
-            new Competitor("Денис","М","10 км","55:55"),
-            new Competitor("Дмитрий","М","10 км","51:20"),
-            new Competitor("Степан","М","5 км","31:20"),
-            new Competitor("Соломон","М","5 км","31:31"),
-            new Competitor("Анастасия","Ж","10 км","55:40"),
-            new Competitor("Диана","Ж","10 км","55:50"),
-            new Competitor("Марина","Ж","10 км","55:55"),
-            new Competitor("Александра","Ж","5 км","31:20"),
-            new Competitor("Эльмира","Ж","10 км","55:20"),
-            new Competitor("Алёна","Ж","10 км","55:30"),
-            new Competitor("Алексей","М","10 км","55:10"),
-            new Competitor("Григорий","М","10 км","55:20"),
-            new Competitor("Георгий","М","10 км","55:30"),
-            new Competitor("Евгения","Ж","5 км","32:20"),
-            new Competitor("Ксения","Ж","5 км","33:20"));
-
-        AnnotationConfigApplicationContext applicationContext =
-                new AnnotationConfigApplicationContext(ResultProcessorConfig.class);
-        CsvParser csvParser = applicationContext.getBean(CsvParser.class);
-        csvParser.parseCsv();
-
-        List<Competitor> actualCompetitors = csvParser.getCompetitorList();
-
-        for (int i = 0; i < expectedCompetitors.size(); i++) {
-            Assert.assertEquals(expectedCompetitors.get(i).getName(), actualCompetitors.get(i).getName());
-            Assert.assertEquals(expectedCompetitors.get(i).getGender(), actualCompetitors.get(i).getGender());
-            Assert.assertEquals(expectedCompetitors.get(i).getDistance(), actualCompetitors.get(i).getDistance());
-            Assert.assertEquals(expectedCompetitors.get(i).getTime(), actualCompetitors.get(i).getTime());
-            Assert.assertEquals(expectedCompetitors.get(i).getTimeInSeconds(), actualCompetitors.get(i).getTimeInSeconds());
-        }
-    }
-}
\ No newline at end of file
Index: src/test/java/Competition/InMemoryResultProcessorTest.java
===================================================================
diff --git a/src/test/java/Competition/InMemoryResultProcessorTest.java b/src/test/java/Competition/InMemoryResultProcessorTest.java
deleted file mode 100644
--- a/src/test/java/Competition/InMemoryResultProcessorTest.java	
+++ /dev/null	
@@ -1,67 +0,0 @@
-package Competition;
-
-import org.junit.Test;
-import org.springframework.context.annotation.AnnotationConfigApplicationContext;
-
-import java.io.ByteArrayOutputStream;
-import java.io.PrintStream;
-import java.util.List;
-
-import static org.junit.Assert.*;
-
-public class InMemoryResultProcessorTest {
-
-    @Test
-    public void getTopCompetitors() {
-        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ResultProcessorConfig.class);
-        CsvParser csvParser = context.getBean(CsvParser.class);
-        csvParser.parseCsv();
-        ResultsProcessor resultsProcessor = context.getBean(ResultsProcessor.class);
-
-        List<Competitor> actualList = resultsProcessor.getTopCompetitors(5, Gender.FEMALE, Distance.TenKm);
-
-        Competitor competitor1 = new Competitor("Мария","Ж","10 км","51:20");
-        Competitor competitor2 = new Competitor("Анна","Ж","10 км","52:20");
-        Competitor competitor3 = new Competitor("Наталья","Ж","10 км","53:20");
-        Competitor competitor4 = new Competitor("Светлана","Ж","10 км","54:20");
-        Competitor competitor5 = new Competitor("Тамара","Ж","10 км","55:10");
-        List<Competitor> expectedList = List.of(competitor1, competitor2, competitor3, competitor4, competitor5);
-
-        for (int i = 0; i < actualList.size(); i++) {
-            assertEquals(expectedList.get(i).getName(), actualList.get(i).getName());
-            assertEquals(expectedList.get(i).getGender(), actualList.get(i).getGender());
-            assertEquals(expectedList.get(i).getDistance(), actualList.get(i).getDistance());
-            assertEquals(expectedList.get(i).getTime(), actualList.get(i).getTime());
-            assertEquals(expectedList.get(i).getTimeInSeconds(), actualList.get(i).getTimeInSeconds());
-        }
-    }
-
-
-    @Test
-    public void printTopCompetitors() {
-        AnnotationConfigApplicationContext context = new AnnotationConfigApplicationContext(ResultProcessorConfig.class);
-        CsvParser csvParser = context.getBean(CsvParser.class);
-        csvParser.parseCsv();
-        ResultsProcessor resultsProcessor = context.getBean(ResultsProcessor.class);
-
-        PrintStream defaultOut = System.out;
-        ByteArrayOutputStream outputStreamCaptor = new ByteArrayOutputStream();
-        System.setOut(new PrintStream(outputStreamCaptor));
-
-        resultsProcessor.printTopCompetitors(10, Gender.FEMALE, Distance.TenKm);
-        String actual = outputStreamCaptor.toString().trim();
-
-        String expected = "Top 1 competitor is Мария with finish time: 51:20 \n" +
-                          "Top 2 competitor is Анна with finish time: 52:20 \n" +
-                          "Top 3 competitor is Наталья with finish time: 53:20 \n" +
-                          "Top 4 competitor is Светлана with finish time: 54:20 \n" +
-                          "Top 5 competitor is Тамара with finish time: 55:10 \n" +
-                          "Top 6 competitor is Эльмира with finish time: 55:20 \n" +
-                          "Top 7 competitor is Алёна with finish time: 55:30 \n" +
-                          "Top 8 competitor is Анастасия with finish time: 55:40 \n" +
-                          "Top 9 competitor is Диана with finish time: 55:50 \n" +
-                          "Top 10 competitor is Марина with finish time: 55:55 \n".trim();
-        assertEquals(expected, actual);
-        System.setOut(defaultOut);
-    }
-}
\ No newline at end of file
